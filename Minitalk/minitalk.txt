signals:
    This is the software interupts sent by OS to indicates that an event has happpened.
    These events can range from hardware  malfunctioning to user actions , or even more inter-process communication.
    Signals can be used to convery information and prompt processes to take apporpiate actions based on the event's nature therefore they serves as means of communication between running progra(process) and the operating system allowing the programs to respon to varous event in an unsynchronized manner.
    
    To create signal in c we can use kill() or raise() functions for example:
    kill()
        To send a signal from one process to another process, you can use the kill() function.The kill() function allows a process to send a specified signal to another process identified by its process ID (PID).
        Its syntax is as follows:
        #include <sys/types.h>
        #include <signal.h>
        int kill(pid_t pid, int sig);
        The pid parameter represents the process ID of the target process, and sig specifies the signal to be sent.
WHY SIGNALS?

The purpose of signals in C programming is multifaceted and serves several important functions:

Notify processes about events or conditions:
Example 1: for a user action, sending a SIGINT signal (Ctrl+C) to notify a process to terminate gracefully in response to a user interrupt.

Example 2: for a hardware exception, sending a SIGFPE signal, which indicates a floating-point arithmetic exception ( ‚Üí division by zero).

Handle asynchronous events efficiently:
Example: receiving a SIGALRM signal to handle a timer or alarm event, allowing the process to perform a specific action after a specified time interval.

Handle exceptional situations or errors:
Example: catching a SIGSEGV signal (segmentation fault) to handle a memory access violation, enabling the process to log the error and gracefully recover or terminate.

Facilitate inter-process communication:
Example: sending a SIGUSR1 signal from one process to another as a custom communication mechanism, indicating a request for specific actions or data exchange between the processes.

Enable graceful termination of processes:
Example: receiving a SIGTERM signal to initiate a graceful termination process, allowing the process to perform cleanup tasks, release resources, and exit gracefully.

Allow for custom behavior in response to signals:
Example: registering a signal handler for a custom signal, such as SIGUSR2, to define a specific action that the process should take when receiving that signal, tailored to the specific needs of the application.

These examples demonstrate how signals in C serve distinct purposes in handling events, communication, error management, termination, and customization of process behavior.

THE SIGNALS AND THEIR DELIVERY MECHANISMS

Here‚Äôs a detailled explanation of when signals are delivered, how they are delivered, and by whom:

When?
Signals can be delivered to a process at any time during its execution, launched by events like user actions, hardware exceptions, or even more inter-process communication.

Signals can interrupt the normal flow of a process and require the process to handle or respond to the signal appropriately.

How?
Signals are delivered by the operating system to the target process.

When a signal is generated, the operating system identifies the target process based on its process ID (PID).

The operating system then interrupts the execution of the target process and delivers the signal by invoking the corresponding signal handler or performing the default action associated with the signal.

By whom?
Signals can be delivered by various sources, including the user, hardware exceptions, or other processes involved in inter-process communication.

The delivery of signals involves coordination between the operating system and the target process.

The operating system is responsible for identifying the target process, interrupting its execution, and delivering the signal, while the process handles the signal by executing the corresponding signal handler or default action.

SOME DEFAULT ACTIONS‚Ä¶

Each signal has a default action associated with it, which is the action taken by the operating system if the receiving process does not specify a custom signal handler.

The default actions of signals can vary depending on the signal.

Here are some common default actions:

Termination Signals:
SIGINT (Interrupt): The process is terminated. This signal is generated by pressing Ctrl+C.
Termination with Core Dump Signals:
SIGQUIT (Quit): The process is terminated. This signal is triggered by pressing Ctrl+\ on the keyboard. A core dump is generated.
SIGILL (Illegal Instruction): The process is terminated with a core dump, indicating an illegal instruction.
SIGABRT (Abort): The process is terminated with a core dump, usually when an internal error or inconsistency is detected.
SIGFPE (Floating-Point Exception): The process is terminated with a core dump when a floating-point arithmetic exception occurs, such as division by zero.
SIGSEGV (Segmentation Fault): The default action for this signal is to terminate the process and generate a core dump. It occurs when the program attempts to access a memory location that it is not allowed to access, such as accessing an invalid pointer or accessing memory that has not been allocated.
üóíÔ∏èNote:

A core dump is a file that contains a snapshot of a program‚Äôs memory at the time of a crash or termination due to a critical error. It includes information about memory, registers, and program state.

The core dump is saved for analysis, allowing developers to diagnose and fix software bugs by examining the crash‚Äôs cause and program state. It is a valuable tool for debugging and improving program stability.

Ignored Signals:
SIGCHLD (Child Status Changed): The signal is ignored, indicating that the process does not want to be notified when child processes terminate.
SIGURG (Urgent Condition on Socket): The signal is ignored, typically used for out-of-band data in socket communication.
Stop Signals:
SIGSTOP (Stop): The process is stopped (paused) and can be resumed later using SIGCONT.
SIGTSTP (Terminal Stop): The process is stopped (paused) by the user, typically through the Ctrl+Z combination.
Continue Signal:
SIGCONT (Continue): The process is resumed after being stopped or paused.
For some signals, the default action can vary, depending on the specific operating system and its configuration. It may terminate the process, ignore the signal, or perform other actions.

It‚Äôs important to note that the default actions of signals can be modified by the process itself by registering custom signal handlers using the signal() or sigaction() functions.

This allows processes to define their own action when receiving specific signals, overriding the default actions.

More details on the next section.

THE IMPORTANT ROLE OF SIGNAL HANDLERS

A signal handler is a function that is executed when a specific signal is received by a process.

It allows the process to define its own custom behavior in response to the signal, overriding the default action associated with that signal.

To set up a signal handler in C, you need to follow these steps:

Declare the signal handler function:
start by declaring a function that will serve as the signal handler.

The function should have a specific signature that matches the expected format for a signal handler function.

It typically takes an integer parameter representing the signal number:

#include <stdio.h>
#include <signal.h>

void signalHandler(int signalNumber) 
{
    /* Handle the signal here */
    /* Perform necessary actions or tasks */
}Register the signal handler: 
Register the signal number:
use the signal() function to register the signal handler for a specific signal. The signal() function takes two arguments:

the signal number
and the address of the signal handler function:
signal(SIGINT, signalHandler);
In the above example, the signalHandler() function is registered as the signal handler for the SIGINT signal (generated by pressing Ctrl+C). Whenever the SIGINT signal is received, the registered signal handler function will be called.

Signal handler execution:
when the specified signal is received by the process, the registered signal handler function will be executed.

Inside the signal handler function, you can perform actions or tasks specific to your application‚Äôs needs, such as logging events, handling errors, updating variables, or triggering specific actions:

void signalHandler(int signalNumber) 
{
    printf("Received signal: %d\n", signalNumber);
    /* Perform actions or tasks based on the signal received */
}
What is the execution flow when a signal is received by a process with or without a handler ?

When a signal is received without a signal handler:
If a process receives a signal without a registered signal handler, the default action associated with the signal is taken.

The operating system handles the signal and executes the default action immediately.

When a signal is received with a signal handler:
If a process receives a signal and has a registered signal handler for that signal, the process gains control.

The operating system interrupts the process‚Äôs normal execution flow and transfers control to the registered signal handler function.

The signal handler function is executed, allowing the process to handle the signal in a custom manner.

After the signal handler function completes, the process resumes its normal execution from where it was interrupted.

CONCLUSION

Signals form an integral part of C programming, enabling efficient communication between processes and handling exceptional events. Understanding signals, their purpose, delivery mechanisms, and the role of signal handlers is essential for building robust and responsive applications.

By harnessing the power of signals, programmers can enhance the reliability and adaptability of their C programs while ensuring graceful handling of unexpected scenarios.



sample Header file 
#ifndef FT_MINITALK_H
#define FT_MINITALK_H
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <signal.h>
#include <string.h>
#include "libft/libft.h"
//char **str = NULL;

/*
The socket address for IPV4 (Internet Internet Protocol Version 4) this  is built in
This is for socket programming and you do npt really need to 
*/
// struct sockaddr_in
// {
	// short sin_family;
	// unsigned short sin_port;
	// struct in_addr sin_addr;
	// char	sin_sero[8];
// }				t_ipv4;
// 
// struct in_addr
// {
	// unsigned long s_addr; 
	// load with inet_aton() : The inet_aton() is a function for converting the IPV4 address dotted-decimal notation to its binary form: inet_aton() stands for internet address to number 
	/*
		Example:
		int inet_aton(const char *cp, struct in_addr *inp);
		
		cp: A pointer to a string containing the IPv4 address in dotted-decimal notation (e.g., "192.168.1.1").

		inp: A pointer to a struct in_addr where the binary representation of the IPv4 address will be stored.

	*/
// };


#endif